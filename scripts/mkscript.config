#!/data/data/com.termux/files/usr/bin/env bash

# Make shell scripts for bash
# This program is still UNDER CONSTRUCTION

_prompt_file_exists () {
    read -p "Would you like to overwrite the existing file? [y/n]> "
    while [[ -n $REPLY ]]; do
        case $REPLY in
            "y"|"Y")
                echo "valid"
                break ;;
            "n"|"N")
                echo ""
                break ;;
            *)
                echo "Invalid response... Try again."
                read -p "Would you like to overwrite the existing file? [y/n]> "
                continue ;;
        esac
    done
}

_check_file_existence () {
    filename="$1"
    if [[ -f "$filename" ]]; then
        echo "File '$filename' already exists!"
        if [[ -n "$REPLY" ]]; then
            REPLY=""
        fi
        if [[ -z $(_prompt_file_exists) ]]; then
            echo "Aborting file creation and exiting now."
            exit $FILERR
        fi
    fi
    echo "Writing to existing file '$filename'..."
}

_make_new_file () {
    filename="$1"
    if [[ -z "$filename" ]]; then
        echo "Filename '$filename' has no value."
        echo "Exiting now."
        exit $FILERR
    fi
    touch "$filename"
    cat << '_EOF_' > "$filename"
#!/data/data/com.termux/files/usr/bin/env bash
#
# filename -- file description 
#
# Outline:
#   [[command] [options] [[arg]...]]
#   Sample use case goes here
#   Short script summary goes here

# Log the program name
PROGNAME="$(basename $0)"

_echo_usage_notice () {
    echo "Usage: $PROGNAME [ options ] [ args ]..."
}

_echo_usage_summary () {
    cat <<- _EOF_
        Usage: $PROGNAME [ options ] [ args ]...

        Summary
        -------
        Program summary goes here

        Options
        -------
        Help options go here
        -h --help  Display this help text

        Arguments
        ---------
        Argument descriptions go here
        [ arg ]  Description
    _EOF_
}

# Checks to see if param is empty
_check_if_empty () {
    parameter="$1"
    if [[ -z "$parameter" ]]; then
        echo "No parameter was given."
        echo "Exiting now."
        exit
    fi
}

# Check for positional parameters as arguments
if (( 0 == $# )); then
    _echo_usage_notice
    exit
fi

# Check if positional parameters are options
case "$1" in
    -h|--help)
        _echo_usage_summary
        exit
        ;;
    *)
        _echo_usage_notice
        exit
        ;;
esac
_EOF_
    echo "File '$filename' was created!"
}

_set_file_permissions () {
    filename="$1"
    chmod 700 "$filename" 2> /dev/null
    if (( 0 != $? )); then
        echo "Could not set file permissions for '$filename'."
        echo "Exiting now."
        exit $PERERR
    fi
    permissions=$(ls -l "$filename" | cut -d ' ' -f 1)
    echo "File '$filename' has '$permissions' permissions"
}

_output_vim_config () {
    cat <<- _EOF_
        :set autoindent
        :set number
        :set background=dark
        :syntax on
    _EOF_
}

_open_editor () {
    fileset="$1"
    if [[ -n "$(which gvim)" ]]; then
        gvim -c "set syntax=sh" $fileset
    elif [[ -n "$(which vim)" ]]; then
        vim -c "set syntax=sh" $fileset
    elif [[ -n "$(which vi)" ]]; then
        vi $fileset
    else
        echo "Could not find [g]vi[m]."
        echo "Exiting now."
        exit $EDTERR
    fi
}

_check_default_editor () {
    if [[ -z "$EDITOR" ]]; then
        echo "You have not set a default editor."
        echo "The following are suggested editors, but are not required."
        read -p "Choose an editor [nano/vi[m]/gedit/kate]> " EDIT