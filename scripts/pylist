#!/data/data/com.termux/files/usr/bin/env bash

# pylist -- attempts to filter python src files/dirs in a clean way

# Outline:
#    [command] [options] [[arg]...]
#    pylist files -> lists only src files
#    pylist dirs -> lists only directories
#
#    This script lists python source files without the bytecode files while filtering
#    out valid packages (directories) found within the src tree. This way, you can
#    cleanly see what src files are available and the packages that accompany those modules.

# Log the program name
PROGNAME="$(basename $0)"

_echo_usage_notice () {
    echo "Usage: $PROGNAME [ -h | --help | -p | -m | -b ] [ filepath ]"
}

_echo_usage_summary () {
    cat <<- _EOF_
        Usage: $PROGNAME [ -h | -p | -m | -b ] [ filepath ]

        Summary
        -------
        $PROGNAME Filter 'ls' output for python source files

        Options
        -------
        -h --help        Display this help text
        -p --packages    List only the packages within a source tree
        -m --modules     List only the modules within a source tree
        -b --bytecode    List only the bytecode within a source tree

        Arguments
        ---------
        [filepath]       The path containing the modules or packages

        Examples
        --------
        Ex 1: lists only the modules found within the kivy package
        #   $PROGNAME --modules /usr/lib/python-2.7/dist-packages/kivy

        Ex 2: lists only the packages found within the kivy package
        #   $PROGNAME -p /usr/lib/python-2.7/dist-packages/kivy

        Ex 3: lists only the bytecode files found within the current working directory
        #   $PROGNAME -b .
    _EOF_
}

# Checks to see if param is empty
_check_if_empty () {
    filepath="$1"
    # Make sure the filepath isn't empty
    if [[ -z "$filepath" ]]; then
        echo "No filepath was given."
        exit 1
    fi
}

# Check for positional parameters as arguments
if (( 0 == $# )); then
    _echo_usage_notice
    exit 1
else
    read OPTION FILEPATH <<< "$1 $2"
fi

# Check if positional parameters are options
case "$OPTION" in
    -h|--help)
        _echo_usage_summary
        exit 0
        ;;
    -p|--packages)
        _check_if_empty "$FILEPATH"
        for item in "${FILEPATH}"/*; do
            if [[ -d "$item" ]]; then
                ls -lhHd "${item}/"
            fi
        done
        exit 0
        ;;
    -m|--modules)
        _check_if_empty "$FILEPATH"
        for item in "${FILEPATH}"/*; do
            if [[ -f "$item" && "$item" =~ \.py$ ]]; then
                ls -lhH "$item"
            fi
        done
        exit 0
        ;;
    -b|--bytecode)
        _check_if_empty "$FILEPATH"
        for item in "${FILEPATH}"/*; do
            if [[ -f "$item" && "$item" =~ \.pyc$ ]]; then
                ls -lhH "$item"
            fi
        done
        exit 0
        ;;
    *)
        _echo_usage_notice
        exit 1
        ;;
esac